{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport 'moment/locale/pt-br';\nimport moment from 'moment';\nimport { appEnv } from '../constants/Env.constant';\nimport { AvailableLanguages } from '../types/Global.types';\nexport class DateHelper {}\n\n_defineProperty(DateHelper, \"displayHumanDate\", date => {\n  switch (appEnv.language) {\n    case AvailableLanguages.ptBr:\n      return moment(date).locale(\"pt-br\").format(\"ddd, DD MMM YY\");\n\n    case AvailableLanguages.eng:\n      return moment(date).locale(\"en\").format(\"ddd, MMM Do YY\");\n\n    default:\n      return moment(date).locale(\"en\").format(\"ddd, MMM Do YY\");\n  }\n});\n\n_defineProperty(DateHelper, \"_analyzeDate\", (inputFormat, separator) => {\n  const splittedData = inputFormat.split(separator);\n  const dataComponentsPosition = {\n    month: {\n      index: 0,\n      characters: 0\n    },\n    year: {\n      index: 0,\n      characters: 0\n    },\n    day: {\n      index: 0,\n      characters: 0\n    }\n  }; // tslint:disable-next-line: forin\n\n  for (const index in splittedData) {\n    if (splittedData[index].includes(\"D\")) {\n      dataComponentsPosition.day.index = parseInt(index);\n      dataComponentsPosition.day.characters = splittedData[index].length;\n    }\n\n    if (splittedData[index].includes(\"M\")) {\n      dataComponentsPosition.month.index = parseInt(index);\n      dataComponentsPosition.month.characters = splittedData[index].length;\n    }\n\n    if (splittedData[index].includes(\"Y\")) {\n      dataComponentsPosition.year.index = parseInt(index);\n      dataComponentsPosition.year.characters = splittedData[index].length;\n    }\n  }\n\n  return dataComponentsPosition;\n});\n\n_defineProperty(DateHelper, \"parseDataToServerFormat\", (rawData, inputFormat, separator) => {\n  const splittedRawData = rawData.split(separator);\n\n  const analyzedInputFormat = DateHelper._analyzeDate(inputFormat, separator);\n\n  const month = splittedRawData[analyzedInputFormat.month.index];\n  const day = splittedRawData[analyzedInputFormat.day.index];\n  const year = splittedRawData[analyzedInputFormat.year.index]; // this function will always output to this format: MM/DD/YYYY (server accepted format)\n\n  return `${month}${separator}${day}${separator}${year}`;\n});","map":null,"metadata":{},"sourceType":"module"}