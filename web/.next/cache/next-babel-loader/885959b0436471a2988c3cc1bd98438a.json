{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/components/elements/form/ProvinceSelector.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { MenuItem, Select } from '@material-ui/core';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { colors } from '../../../constants/UI/Colors.constant';\nimport { UI } from '../../../constants/UI/UI.constant';\nimport { setSearchKey } from '../../../store/actions/ui.action';\nexport const ProvinceSelector = ({\n  provinces\n}) => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    searchKeyword\n  } = router.query;\n  const {\n    searchProvince\n  } = useSelector(state => state.uiReducer);\n\n  const onChangeProvince = async e => {\n    const selectedProvince = e.target.value; //  update our redux (we'll need this info for our post requests)\n\n    await dispatch(setSearchKey(\"searchProvince\", selectedProvince));\n\n    if (!searchKeyword) {\n      return;\n    }\n\n    router.push({\n      pathname: \"/posts\",\n      query: {\n        searchProvince: e.target.value,\n        searchKeyword,\n        page: 1 // since its a new search, page will be always 1!\n\n      }\n    });\n  };\n\n  const onRenderProvinces = () => {\n    return provinces.map(province => __jsx(MenuItem, {\n      key: province.stateName,\n      value: province.stateCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, province.stateCode));\n  };\n\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(Select, {\n    value: searchProvince,\n    onChange: onChangeProvince,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, onRenderProvinces()));\n};\nconst Container = styled.div.withConfig({\n  displayName: \"ProvinceSelector__Container\",\n  componentId: \"sc-12bi6i-0\"\n})([\"@media screen and (min-width:\", \"){border-bottom:1px solid silver;}.MuiInput-underline:after{border-bottom:2px solid \", \";}.MuiInputBase-root{height:100%;}.MuiInput-underline:before{border-bottom:unset;}\"], UI.mediumLayoutBreak, colors.primary);","map":{"version":3,"sources":["/usr/src/app/src/components/elements/form/ProvinceSelector.tsx"],"names":["MenuItem","Select","useRouter","useDispatch","useSelector","styled","colors","UI","setSearchKey","ProvinceSelector","provinces","dispatch","router","searchKeyword","query","searchProvince","state","uiReducer","onChangeProvince","e","selectedProvince","target","value","push","pathname","page","onRenderProvinces","map","province","stateName","stateCode","Container","div","mediumLayoutBreak","primary"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,mBAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,MAAT,QAAuB,uCAAvB;AACA,SAASC,EAAT,QAAmB,mCAAnB;AACA,SAASC,YAAT,QAA6B,kCAA7B;AAOA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA2B;AACzD,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEA,QAAMS,MAAM,GAAGV,SAAS,EAAxB;AAEA,QAAM;AAAEW,IAAAA;AAAF,MAAoBD,MAAM,CAACE,KAAjC;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAqBX,WAAW,CAAWY,KAAK,IAAIA,KAAK,CAACC,SAA1B,CAAtC;;AAEA,QAAMC,gBAAgB,GAAG,MAAMC,CAAN,IAAW;AAClC,UAAMC,gBAAgB,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAlC,CADkC,CAGlC;;AACA,UAAMX,QAAQ,CAACH,YAAY,CAAC,gBAAD,EAAmBY,gBAAnB,CAAb,CAAd;;AAEA,QAAI,CAACP,aAAL,EAAoB;AAClB;AACD;;AAEDD,IAAAA,MAAM,CAACW,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAE,QADA;AAEVV,MAAAA,KAAK,EAAE;AACLC,QAAAA,cAAc,EAAEI,CAAC,CAACE,MAAF,CAASC,KADpB;AAELT,QAAAA,aAFK;AAGLY,QAAAA,IAAI,EAAE,CAHD,CAGG;;AAHH;AAFG,KAAZ;AAQD,GAlBD;;AAoBA,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,WAAOhB,SAAS,CAACiB,GAAV,CAAeC,QAAD,IACnB,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,QAAQ,CAACC,SAAxB;AAAmC,MAAA,KAAK,EAAED,QAAQ,CAACE,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,QAAQ,CAACE,SADZ,CADK,CAAP;AAKD,GAND;;AAQA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAEf,cAAf;AAA+B,IAAA,QAAQ,EAAEG,gBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,iBAAiB,EADpB,CADF,CADF;AAOD,CA5CM;AA8CP,MAAMK,SAAS,GAAG1B,MAAM,CAAC2B,GAAV;AAAA;AAAA;AAAA,oNAEmBzB,EAAE,CAAC0B,iBAFtB,EAOgB3B,MAAM,CAAC4B,OAPvB,CAAf","sourcesContent":["import { MenuItem, Select } from '@material-ui/core';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { colors } from '../../../constants/UI/Colors.constant';\nimport { UI } from '../../../constants/UI/UI.constant';\nimport { setSearchKey } from '../../../store/actions/ui.action';\nimport { IProvince } from '../../../types/Form.types';\n\ninterface IProps {\n  provinces: IProvince[];\n}\n\nexport const ProvinceSelector = ({ provinces }: IProps) => {\n  const dispatch = useDispatch();\n\n  const router = useRouter();\n\n  const { searchKeyword } = router.query;\n\n  const { searchProvince } = useSelector<any, any>(state => state.uiReducer);\n\n  const onChangeProvince = async e => {\n    const selectedProvince = e.target.value;\n\n    //  update our redux (we'll need this info for our post requests)\n    await dispatch(setSearchKey(\"searchProvince\", selectedProvince));\n\n    if (!searchKeyword) {\n      return;\n    }\n\n    router.push({\n      pathname: \"/posts\",\n      query: {\n        searchProvince: e.target.value,\n        searchKeyword,\n        page: 1 // since its a new search, page will be always 1!\n      }\n    });\n  };\n\n  const onRenderProvinces = () => {\n    return provinces.map((province: IProvince) => (\n      <MenuItem key={province.stateName} value={province.stateCode}>\n        {province.stateCode}\n      </MenuItem>\n    ));\n  };\n\n  return (\n    <Container>\n      <Select value={searchProvince} onChange={onChangeProvince}>\n        {onRenderProvinces()}\n      </Select>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  /*DESKTOP ONLY CODE*/\n  @media screen and (min-width: ${UI.mediumLayoutBreak}) {\n    border-bottom: 1px solid silver;\n  }\n\n  .MuiInput-underline:after {\n    border-bottom: 2px solid ${colors.primary};\n  }\n\n  .MuiInputBase-root {\n    height: 100%;\n  }\n\n  .MuiInput-underline:before {\n    border-bottom: unset;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}