{"ast":null,"code":"import { APIHelper } from '../../helpers/APIHelper';\nimport { GenericHelper } from '../../helpers/GenericHelper';\nimport { RequestTypes } from '../../types/Request.types';\nimport { POST_CLEAR, POST_READ, POST_READ_ADD, POST_READ_ONE } from '../reducers/post.reducer';\nimport { setPaginationKeyValues } from './ui.action';\nexport const postRead = (addToEnd = false, page, limit, keyword, stateCode) => // filter by province stateCode\nasync dispatch => {\n  const postUrl = GenericHelper.generateUrlParams(\"/post\", {\n    page,\n    limit,\n    keyword,\n    stateCode\n  });\n  const response = await APIHelper.request(RequestTypes.GET, postUrl, {}, false);\n\n  if (response) {\n    if (response.status !== 200) {\n      alert(response.data.message);\n      return;\n    }\n\n    dispatch({\n      type: addToEnd ? POST_READ_ADD : POST_READ,\n      payload: response.data.docs\n    });\n    return response.data;\n  }\n};\nexport const postReadFeed = (page, limit, provinceData, keywordData, addToEnd) => async dispatch => {\n  // @ts-ignore\n  const payload = await dispatch(postRead(addToEnd, page, limit, keywordData, provinceData));\n  await dispatch(setPaginationKeyValues(payload)); // save new pagination loading values\n};\nexport const postClearAll = () => async dispatch => {\n  await dispatch({\n    type: POST_CLEAR\n  });\n};\nexport const postReadOne = (id, slug) => async dispatch => {\n  let requestUrl;\n\n  if (id) {\n    requestUrl = `?id=${id}`;\n  }\n\n  if (slug) {\n    requestUrl = `?slug=${slug}`;\n  }\n\n  const response = await APIHelper.request(RequestTypes.GET, `/post/${requestUrl}`, {}, false);\n\n  if (response) {\n    const data = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    await dispatch({\n      type: POST_READ_ONE,\n      payload: data\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}