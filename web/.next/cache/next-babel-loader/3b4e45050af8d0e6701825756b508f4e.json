{"ast":null,"code":"import { APIHelper } from '../../helpers/APIHelper';\nimport { GenericHelper } from '../../helpers/GenericHelper';\nimport { RequestTypes } from '../../types/Request.types';\nimport { POST_CLEAR, POST_READ, POST_READ_ADD, POST_READ_ONE } from '../reducers/post.reducer';\nimport { setPaginationKeyValues } from './ui.action';\nexport const postRead = (addToEnd = false, page, limit, keyword, stateCode) => // filter by province stateCode\nasync dispatch => {\n  const postUrl = GenericHelper.generateUrlParams(\"/post\", {\n    page,\n    limit,\n    keyword,\n    stateCode\n  });\n  const response = await APIHelper.request(RequestTypes.GET, postUrl, {}, false);\n\n  if (response) {\n    if (response.status !== 200) {\n      alert(response.data.message);\n      return;\n    }\n\n    dispatch({\n      type: addToEnd ? POST_READ_ADD : POST_READ,\n      payload: response.data.docs\n    });\n    return response.data;\n  }\n};\nexport const postReadFeed = (page, limit, provinceData, keywordData, addToEnd) => async dispatch => {\n  // @ts-ignore\n  const payload = await dispatch(postRead(addToEnd, page, limit, keywordData, provinceData));\n  await dispatch(setPaginationKeyValues(payload)); // save new pagination loading values\n};\nexport const postClearAll = () => async dispatch => {\n  await dispatch({\n    type: POST_CLEAR\n  });\n};\nexport const postReadOne = (id, slug) => async dispatch => {\n  let requestUrl;\n\n  if (id) {\n    requestUrl = `?id=${id}`;\n  }\n\n  if (slug) {\n    requestUrl = `?slug=${slug}`;\n  }\n\n  const response = await APIHelper.request(RequestTypes.GET, `/post/${requestUrl}`, {}, false);\n\n  if (response) {\n    const data = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    await dispatch({\n      type: POST_READ_ONE,\n      payload: data\n    });\n  }\n};","map":{"version":3,"sources":["/usr/src/app/src/store/actions/post.action.ts"],"names":["APIHelper","GenericHelper","RequestTypes","POST_CLEAR","POST_READ","POST_READ_ADD","POST_READ_ONE","setPaginationKeyValues","postRead","addToEnd","page","limit","keyword","stateCode","dispatch","postUrl","generateUrlParams","response","request","GET","status","alert","data","message","type","payload","docs","postReadFeed","provinceData","keywordData","postClearAll","postReadOne","id","slug","requestUrl"],"mappings":"AAAA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AAEA,SAASC,YAAT,QAA6B,2BAA7B;AAEA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,EAA+CC,aAA/C,QAAoE,0BAApE;AACA,SAASC,sBAAT,QAAuC,aAAvC;AAEA,OAAO,MAAMC,QAAQ,GAAG,CACtBC,QAAiB,GAAG,KADE,EAEtBC,IAFsB,EAGtBC,KAHsB,EAItBC,OAJsB,EAKtBC,SALsB,KAKI;AACvB,MAAOC,QAAP,IAAoB;AACvB,QAAMC,OAAO,GAAGd,aAAa,CAACe,iBAAd,CAAgC,OAAhC,EAAyC;AACvDN,IAAAA,IADuD;AAEvDC,IAAAA,KAFuD;AAGvDC,IAAAA,OAHuD;AAIvDC,IAAAA;AAJuD,GAAzC,CAAhB;AAOA,QAAMI,QAAa,GAAG,MAAMjB,SAAS,CAACkB,OAAV,CAC1BhB,YAAY,CAACiB,GADa,EAE1BJ,OAF0B,EAG1B,EAH0B,EAI1B,KAJ0B,CAA5B;;AAOA,MAAIE,QAAJ,EAAc;AACZ,QAAIA,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,MAAAA,KAAK,CAACJ,QAAQ,CAACK,IAAT,CAAcC,OAAf,CAAL;AACA;AACD;;AAEDT,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEf,QAAQ,GAAGJ,aAAH,GAAmBD,SAD1B;AAEPqB,MAAAA,OAAO,EAAER,QAAQ,CAACK,IAAT,CAAcI;AAFhB,KAAD,CAAR;AAKA,WAAOT,QAAQ,CAACK,IAAhB;AACD;AACF,CAlCM;AAoCP,OAAO,MAAMK,YAAY,GAAG,CAC1BjB,IAD0B,EAE1BC,KAF0B,EAG1BiB,YAH0B,EAI1BC,WAJ0B,EAK1BpB,QAL0B,KAMvB,MAAOK,QAAP,IAAoB;AACvB;AACA,QAAMW,OAAwB,GAAG,MAAMX,QAAQ,CAC7CN,QAAQ,CAACC,QAAD,EAAWC,IAAX,EAAiBC,KAAjB,EAAwBkB,WAAxB,EAAqCD,YAArC,CADqC,CAA/C;AAGA,QAAMd,QAAQ,CAACP,sBAAsB,CAACkB,OAAD,CAAvB,CAAd,CALuB,CAK0B;AAClD,CAZM;AAcP,OAAO,MAAMK,YAAY,GAAG,MAAM,MAAOhB,QAAP,IAAoB;AACpD,QAAMA,QAAQ,CAAC;AACbU,IAAAA,IAAI,EAAErB;AADO,GAAD,CAAd;AAGD,CAJM;AAMP,OAAO,MAAM4B,WAAW,GAAG,CAACC,EAAD,EAAMC,IAAN,KAAgB,MAAOnB,QAAP,IAAoB;AAC7D,MAAIoB,UAAJ;;AACA,MAAIF,EAAJ,EAAQ;AACNE,IAAAA,UAAU,GAAI,OAAMF,EAAG,EAAvB;AACD;;AAED,MAAIC,IAAJ,EAAU;AACRC,IAAAA,UAAU,GAAI,SAAQD,IAAK,EAA3B;AACD;;AAED,QAAMhB,QAAQ,GAAG,MAAMjB,SAAS,CAACkB,OAAV,CACrBhB,YAAY,CAACiB,GADQ,EAEpB,SAAQe,UAAW,EAFC,EAGrB,EAHqB,EAIrB,KAJqB,CAAvB;;AAOA,MAAIjB,QAAJ,EAAc;AACZ,UAAMK,IAAW,GAAGL,QAAQ,CAACK,IAA7B;;AAEA,QAAIL,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,MAAAA,KAAK,CAACJ,QAAQ,CAACK,IAAT,CAAcC,OAAf,CAAL;AACD;;AAED,UAAMT,QAAQ,CAAC;AACbU,MAAAA,IAAI,EAAElB,aADO;AAEbmB,MAAAA,OAAO,EAAEH;AAFI,KAAD,CAAd;AAID;AACF,CA7BM","sourcesContent":["import { APIHelper } from '../../helpers/APIHelper';\nimport { GenericHelper } from '../../helpers/GenericHelper';\nimport { IPost } from '../../types/Post.types';\nimport { RequestTypes } from '../../types/Request.types';\nimport { IPaginationData } from '../../types/UI.types';\nimport { POST_CLEAR, POST_READ, POST_READ_ADD, POST_READ_ONE } from '../reducers/post.reducer';\nimport { setPaginationKeyValues } from './ui.action';\n\nexport const postRead = (\n  addToEnd: boolean = false,\n  page?: number,\n  limit?: number,\n  keyword?: string | null,\n  stateCode?: string | null // filter by province stateCode\n) => async (dispatch) => {\n  const postUrl = GenericHelper.generateUrlParams(\"/post\", {\n    page,\n    limit,\n    keyword,\n    stateCode,\n  });\n\n  const response: any = await APIHelper.request(\n    RequestTypes.GET,\n    postUrl,\n    {},\n    false\n  );\n\n  if (response) {\n    if (response.status !== 200) {\n      alert(response.data.message);\n      return;\n    }\n\n    dispatch({\n      type: addToEnd ? POST_READ_ADD : POST_READ,\n      payload: response.data.docs,\n    });\n\n    return response.data;\n  }\n};\n\nexport const postReadFeed = (\n  page: number,\n  limit: number,\n  provinceData: string,\n  keywordData?: string,\n  addToEnd?: boolean\n) => async (dispatch) => {\n  // @ts-ignore\n  const payload: IPaginationData = await dispatch(\n    postRead(addToEnd, page, limit, keywordData, provinceData)\n  );\n  await dispatch(setPaginationKeyValues(payload)); // save new pagination loading values\n};\n\nexport const postClearAll = () => async (dispatch) => {\n  await dispatch({\n    type: POST_CLEAR,\n  });\n};\n\nexport const postReadOne = (id?, slug?) => async (dispatch) => {\n  let requestUrl;\n  if (id) {\n    requestUrl = `?id=${id}`;\n  }\n\n  if (slug) {\n    requestUrl = `?slug=${slug}`;\n  }\n\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/post/${requestUrl}`,\n    {},\n    false\n  );\n\n  if (response) {\n    const data: IPost = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    await dispatch({\n      type: POST_READ_ONE,\n      payload: data,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}