{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { APIHelper } from '../../helpers/APIHelper';\nimport { GenericHelper } from '../../helpers/GenericHelper';\nimport { RequestTypes } from '../../types/Request.types';\nimport { POST_CLEAR, POST_READ, POST_READ_ADD, POST_READ_ONE } from '../reducers/post.reducer';\nimport { setPaginationKeyValues } from './ui.action';\nexport var postRead = function postRead() {\n  var addToEnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var page = arguments.length > 1 ? arguments[1] : undefined;\n  var limit = arguments.length > 2 ? arguments[2] : undefined;\n  var keyword = arguments.length > 3 ? arguments[3] : undefined;\n  var stateCode = arguments.length > 4 ? arguments[4] : undefined;\n  return (// filter by province stateCode\n    function _callee(dispatch) {\n      var postUrl, response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              postUrl = GenericHelper.generateUrlParams(\"/post\", {\n                page: page,\n                limit: limit,\n                keyword: keyword,\n                stateCode: stateCode\n              });\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, postUrl, {}, false));\n\n            case 3:\n              response = _context.sent;\n\n              if (!response) {\n                _context.next = 10;\n                break;\n              }\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              alert(response.data.message);\n              return _context.abrupt(\"return\");\n\n            case 8:\n              dispatch({\n                type: addToEnd ? POST_READ_ADD : POST_READ,\n                payload: response.data.docs\n              });\n              return _context.abrupt(\"return\", response.data);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  );\n};\nexport var postReadFeed = function postReadFeed(page, limit, provinceData, keywordData, addToEnd) {\n  return function _callee2(dispatch) {\n    var payload;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(postRead(addToEnd, page, limit, keywordData, provinceData)));\n\n          case 2:\n            payload = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(dispatch(setPaginationKeyValues(payload)));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var postClearAll = function postClearAll() {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: POST_CLEAR\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var postReadOne = function postReadOne(id, slug) {\n  return function _callee4(dispatch) {\n    var requestUrl, response, data;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (id) {\n              requestUrl = \"?id=\".concat(id);\n            }\n\n            if (slug) {\n              requestUrl = \"?slug=\".concat(slug);\n            }\n\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/post/\".concat(requestUrl), {}, false));\n\n          case 4:\n            response = _context4.sent;\n\n            if (!response) {\n              _context4.next = 10;\n              break;\n            }\n\n            data = response.data;\n\n            if (response.status !== 200) {\n              alert(response.data.message);\n            }\n\n            _context4.next = 10;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: POST_READ_ONE,\n              payload: data\n            }));\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}