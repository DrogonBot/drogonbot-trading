{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { APIHelper } from '../../helpers/APIHelper';\nimport { TS } from '../../helpers/LanguageHelper';\nimport { RequestTypes } from '../../types/Request.types';\nimport { CLEAR_JOB_ROLES, READ_CITIES, READ_COUNTRIES, READ_JOB_ROLES, READ_SECTORS, READ_STATES, WIZARD_FORM_UPDATE_CURRENT_STEP, WIZARD_FORM_UPDATE_TOTAL_STEPS } from '../reducers/form.reducer';\nimport { setLoading } from './ui.action';\nexport var loadCountries = function loadCountries() {\n  return function _callee(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/country\", {}, false));\n\n          case 2:\n            response = _context.sent;\n\n            if (!response) {\n              _context.next = 9;\n              break;\n            }\n\n            data = response.data;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(dispatch(setLoading(false, \"loadingLocation\")));\n\n          case 7:\n            if (response.status !== 200) {\n              alert(response.data.message);\n            }\n\n            dispatch({\n              type: READ_COUNTRIES,\n              payload: data\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadCountryProvinces = function loadCountryProvinces(country) {\n  var addDefaultOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return function _callee2(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/places/\".concat(country, \"?statesOnly=true\"), {}, false));\n\n          case 2:\n            response = _context2.sent;\n\n            if (response) {\n              data = response.data;\n\n              if (addDefaultOption) {\n                // adds default option if needed\n                data = [{\n                  stateName: TS.string(\"form\", \"selectProvinceText\"),\n                  stateCode: \"default\"\n                }].concat(_toConsumableArray(data));\n              }\n\n              if (response.status !== 200) {\n                alert(response.data.message);\n              }\n\n              dispatch({\n                type: READ_STATES,\n                payload: data\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadProvinceCities = function loadProvinceCities(country, stateCode) {\n  return function _callee3(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/places/\".concat(country, \"/\").concat(stateCode, \"?citiesOnly=true\"), {}, false));\n\n          case 2:\n            response = _context3.sent;\n\n            if (!response) {\n              _context3.next = 9;\n              break;\n            }\n\n            data = response.data;\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(dispatch(setLoading(false, \"loadingLocation\")));\n\n          case 7:\n            if (response.status !== 200) {\n              alert(response.data.message);\n            }\n\n            dispatch({\n              type: READ_CITIES,\n              payload: data\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadJobRoles = function loadJobRoles(keyword) {\n  return function _callee4(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/sectors/search/\".concat(keyword), {}, true));\n\n          case 2:\n            response = _context4.sent;\n\n            if (response) {\n              data = response.data;\n\n              if (response.status !== 200) {\n                alert(response.data.message);\n              }\n\n              dispatch({\n                type: READ_JOB_ROLES,\n                payload: data\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var readSectors = function readSectors(country) {\n  return function _callee5(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/sectors/\".concat(country), {}, true));\n\n          case 2:\n            response = _context5.sent;\n\n            if (response) {\n              data = response.data;\n\n              if (response.status !== 200) {\n                alert(response.data.message);\n              }\n\n              dispatch({\n                type: READ_SECTORS,\n                payload: data\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var clearJobRoles = function clearJobRoles() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_JOB_ROLES\n    });\n  };\n};\nexport var wizardFormUpdateCurrentStep = function wizardFormUpdateCurrentStep(key, currentStep) {\n  return function _callee6(dispatch) {\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            dispatch({\n              type: WIZARD_FORM_UPDATE_CURRENT_STEP,\n              payload: {\n                key: key,\n                currentStep: currentStep\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var wizardFormUpdateTotalSteps = function wizardFormUpdateTotalSteps(key, totalSteps) {\n  return function _callee7(dispatch) {\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            dispatch({\n              type: WIZARD_FORM_UPDATE_TOTAL_STEPS,\n              payload: {\n                key: key,\n                totalSteps: totalSteps\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/usr/src/app/src/store/actions/form.actions.ts"],"names":["APIHelper","TS","RequestTypes","CLEAR_JOB_ROLES","READ_CITIES","READ_COUNTRIES","READ_JOB_ROLES","READ_SECTORS","READ_STATES","WIZARD_FORM_UPDATE_CURRENT_STEP","WIZARD_FORM_UPDATE_TOTAL_STEPS","setLoading","loadCountries","dispatch","request","GET","response","data","status","alert","message","type","payload","loadCountryProvinces","country","addDefaultOption","stateName","string","stateCode","loadProvinceCities","loadJobRoles","keyword","readSectors","clearJobRoles","wizardFormUpdateCurrentStep","key","currentStep","wizardFormUpdateTotalSteps","totalSteps"],"mappings":"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","sourcesContent":["import { APIHelper } from '../../helpers/APIHelper';\nimport { TS } from '../../helpers/LanguageHelper';\nimport { ICityResponse, ICountry, IJobRole, IProvince, ISector } from '../../types/Form.types';\nimport { RequestTypes } from '../../types/Request.types';\nimport {\n  CLEAR_JOB_ROLES,\n  READ_CITIES,\n  READ_COUNTRIES,\n  READ_JOB_ROLES,\n  READ_SECTORS,\n  READ_STATES,\n  WIZARD_FORM_UPDATE_CURRENT_STEP,\n  WIZARD_FORM_UPDATE_TOTAL_STEPS,\n} from '../reducers/form.reducer';\nimport { setLoading } from './ui.action';\n\nexport const loadCountries = () => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/country`,\n    {},\n    false\n  );\n\n  if (response) {\n    const data: ICountry[] = response.data;\n\n    await dispatch(setLoading(false, \"loadingLocation\"));\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_COUNTRIES, payload: data });\n  }\n};\nexport const loadCountryProvinces = (\n  country: string,\n  addDefaultOption: boolean = false\n) => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/places/${country}?statesOnly=true`,\n    {},\n    false\n  );\n\n  if (response) {\n    let data: IProvince[] = response.data;\n\n    if (addDefaultOption) {\n      // adds default option if needed\n      data = [\n        {\n          stateName: TS.string(\"form\", \"selectProvinceText\"),\n          stateCode: \"default\",\n        },\n        ...data,\n      ];\n    }\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_STATES, payload: data });\n  }\n};\n\nexport const loadProvinceCities = (\n  country: string,\n  stateCode: string\n) => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/places/${country}/${stateCode}?citiesOnly=true`,\n    {},\n    false\n  );\n\n  if (response) {\n    const data: ICityResponse[] = response.data;\n\n    await dispatch(setLoading(false, \"loadingLocation\"));\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_CITIES, payload: data });\n  }\n};\n\nexport const loadJobRoles = (keyword: string) => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/sectors/search/${keyword}`,\n    {},\n    true\n  );\n\n  if (response) {\n    const data: IJobRole[] = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_JOB_ROLES, payload: data });\n  }\n};\n\nexport const readSectors = (country: string) => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/sectors/${country}`,\n    {},\n    true\n  );\n\n  if (response) {\n    const data: ISector[] = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_SECTORS, payload: data });\n  }\n};\n\nexport const clearJobRoles = () => (dispatch) => {\n  dispatch({ type: CLEAR_JOB_ROLES });\n};\n\nexport const wizardFormUpdateCurrentStep = (\n  key: string,\n  currentStep: number\n) => async (dispatch) => {\n  dispatch({\n    type: WIZARD_FORM_UPDATE_CURRENT_STEP,\n    payload: {\n      key,\n      currentStep,\n    },\n  });\n};\nexport const wizardFormUpdateTotalSteps = (\n  key: string,\n  totalSteps: number\n) => async (dispatch) => {\n  dispatch({\n    type: WIZARD_FORM_UPDATE_TOTAL_STEPS,\n    payload: {\n      key,\n      totalSteps,\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}