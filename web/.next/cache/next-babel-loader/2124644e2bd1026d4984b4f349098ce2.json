{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SET_LOADING, SET_PAGINATION_LOADING_KEY_VALUES, SET_SEARCH_KEY_VALUE } from '../reducers/ui.reducer';\nexport var setSearchKey = function setSearchKey(key, value) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: SET_SEARCH_KEY_VALUE,\n              payload: {\n                key: key,\n                value: value\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var setLoading = function setLoading(status) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"default\";\n  return function (dispatch) {\n    // status regulates if we're in a loading state or not (useful for triggering the loading)\n    // key is used to set a loading bar to only certain elements (like BlockButton for example), if needed.\n    dispatch({\n      type: SET_LOADING,\n      payload: {\n        status: status,\n        key: key\n      }\n    });\n  };\n};\nexport var setPaginationKeyValues = function setPaginationKeyValues(payload) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: SET_PAGINATION_LOADING_KEY_VALUES,\n              payload: payload\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}