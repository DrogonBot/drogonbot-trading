{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { APIHelper } from '../../helpers/APIHelper';\nimport { TS } from '../../helpers/LanguageHelper';\nimport { RequestTypes } from '../../types/Request.types';\nimport { CLEAR_JOB_ROLES, READ_CITIES, READ_COUNTRIES, READ_JOB_ROLES, READ_SECTORS, READ_STATES, WIZARD_FORM_UPDATE_CURRENT_STEP, WIZARD_FORM_UPDATE_TOTAL_STEPS } from '../reducers/form.reducer';\nimport { setLoading } from './ui.action';\nexport var loadCountries = function loadCountries() {\n  return function _callee(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/country\", {}, false));\n\n          case 2:\n            response = _context.sent;\n\n            if (!response) {\n              _context.next = 9;\n              break;\n            }\n\n            data = response.data;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(dispatch(setLoading(false, \"loadingLocation\")));\n\n          case 7:\n            if (response.status !== 200) {\n              alert(response.data.message);\n            }\n\n            dispatch({\n              type: READ_COUNTRIES,\n              payload: data\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadCountryProvinces = function loadCountryProvinces(country) {\n  var addDefaultOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return function _callee2(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/places/\".concat(country, \"?statesOnly=true\"), {}, false));\n\n          case 2:\n            response = _context2.sent;\n\n            if (response) {\n              data = response.data;\n\n              if (addDefaultOption) {\n                // adds default option if needed\n                data = [{\n                  stateName: TS.string(\"form\", \"selectProvinceText\"),\n                  stateCode: \"default\"\n                }].concat(_toConsumableArray(data));\n              }\n\n              if (response.status !== 200) {\n                alert(response.data.message);\n              }\n\n              dispatch({\n                type: READ_STATES,\n                payload: data\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadProvinceCities = function loadProvinceCities(country, stateCode) {\n  return function _callee3(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/places/\".concat(country, \"/\").concat(stateCode, \"?citiesOnly=true\"), {}, false));\n\n          case 2:\n            response = _context3.sent;\n\n            if (!response) {\n              _context3.next = 9;\n              break;\n            }\n\n            data = response.data;\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(dispatch(setLoading(false, \"loadingLocation\")));\n\n          case 7:\n            if (response.status !== 200) {\n              alert(response.data.message);\n            }\n\n            dispatch({\n              type: READ_CITIES,\n              payload: data\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadJobRoles = function loadJobRoles(keyword) {\n  return function _callee4(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/sectors/search/\".concat(keyword), {}, true));\n\n          case 2:\n            response = _context4.sent;\n\n            if (response) {\n              data = response.data;\n\n              if (response.status !== 200) {\n                alert(response.data.message);\n              }\n\n              dispatch({\n                type: READ_JOB_ROLES,\n                payload: data\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var readSectors = function readSectors(country) {\n  return function _callee5(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/sectors/\".concat(country), {}, true));\n\n          case 2:\n            response = _context5.sent;\n\n            if (response) {\n              data = response.data;\n\n              if (response.status !== 200) {\n                alert(response.data.message);\n              }\n\n              dispatch({\n                type: READ_SECTORS,\n                payload: data\n              });\n            }\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var clearJobRoles = function clearJobRoles() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_JOB_ROLES\n    });\n  };\n};\nexport var wizardFormUpdateCurrentStep = function wizardFormUpdateCurrentStep(key, currentStep) {\n  return function _callee6(dispatch) {\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            dispatch({\n              type: WIZARD_FORM_UPDATE_CURRENT_STEP,\n              payload: {\n                key: key,\n                currentStep: currentStep\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var wizardFormUpdateTotalSteps = function wizardFormUpdateTotalSteps(key, totalSteps) {\n  return function _callee7(dispatch) {\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            dispatch({\n              type: WIZARD_FORM_UPDATE_TOTAL_STEPS,\n              payload: {\n                key: key,\n                totalSteps: totalSteps\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}