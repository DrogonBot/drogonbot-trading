{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { appEnv } from '../constants/Env.constant';\nimport { globalStrings } from '../languages/global.lang';\nexport var TS = function TS() {\n  _classCallCheck(this, TS);\n};\n\n_defineProperty(TS, \"replaceTemplateStrings\", function (str, customVars) {\n  var customVarsKeys = Object.keys(customVars);\n\n  if (customVarsKeys) {\n    var _iterator = _createForOfIteratorHelper(customVarsKeys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var k = _step.value;\n        str = str.replace(new RegExp(\"{{\".concat(k, \"}}\"), \"g\"), customVars[k]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return str;\n});\n\n_defineProperty(TS, \"string\", function () {\n  var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var key = arguments.length > 1 ? arguments[1] : undefined;\n  var customVars = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!model) {\n    // pass only the global strings\n    return TS.replaceTemplateStrings(globalStrings[key][appEnv.language], customVars);\n  } // load language strings for a specific model\n\n\n  var _require = require(\"../languages/\".concat(model, \".lang.ts\")),\n      strings = _require.strings; // add our global generic strings\n\n\n  var languageStrings = _objectSpread({}, strings, {}, globalStrings);\n\n  var string = languageStrings[key][appEnv.language];\n  var customVarsKeys = Object.keys(customVars);\n\n  if (customVarsKeys) {\n    var _iterator2 = _createForOfIteratorHelper(customVarsKeys),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var k = _step2.value;\n        string = string.replace(new RegExp(\"{{\".concat(k, \"}}\"), \"g\"), customVars[k]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return string;\n});","map":{"version":3,"sources":["/home/jonit/Personal_projects/emprego-urgente/empregourgente-backend/web/src/helpers/LanguageHelper.ts"],"names":["appEnv","globalStrings","TS","str","customVars","customVarsKeys","Object","keys","k","replace","RegExp","model","key","replaceTemplateStrings","language","require","strings","languageStrings","string"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,2BAAvB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AAEA,WAAaC,EAAb;AAAA;AAAA;;gBAAaA,E,4BAC4B,UAACC,GAAD,EAAcC,UAAd,EAAqC;AAC1E,MAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAAvB;;AACA,MAAIC,cAAJ,EAAoB;AAAA,+CACFA,cADE;AAAA;;AAAA;AAClB,0DAAgC;AAAA,YAArBG,CAAqB;AAC9BL,QAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAY,IAAIC,MAAJ,aAAgBF,CAAhB,SAAuB,GAAvB,CAAZ,EAAyCJ,UAAU,CAACI,CAAD,CAAnD,CAAN;AACD;AAHiB;AAAA;AAAA;AAAA;AAAA;AAInB;;AAED,SAAOL,GAAP;AACD,C;;gBAVUD,E,YAYY,YAIlB;AAAA,MAHHS,KAGG,uEAHU,IAGV;AAAA,MAFHC,GAEG;AAAA,MADHR,UACG,uEADkB,EAClB;;AACH,MAAI,CAACO,KAAL,EAAY;AACV;AACA,WAAOT,EAAE,CAACW,sBAAH,CACLZ,aAAa,CAACW,GAAD,CAAb,CAAmBZ,MAAM,CAACc,QAA1B,CADK,EAELV,UAFK,CAAP;AAID,GAPE,CASH;;;AATG,iBAWiBW,OAAO,wBAAiBJ,KAAjB,cAXxB;AAAA,MAWKK,OAXL,YAWKA,OAXL,EAaH;;;AACA,MAAMC,eAAe,qBAChBD,OADgB,MAEhBf,aAFgB,CAArB;;AAKA,MAAIiB,MAAc,GAAGD,eAAe,CAACL,GAAD,CAAf,CAAqBZ,MAAM,CAACc,QAA5B,CAArB;AACA,MAAMT,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAAvB;;AACA,MAAIC,cAAJ,EAAoB;AAAA,gDACFA,cADE;AAAA;;AAAA;AAClB,6DAAgC;AAAA,YAArBG,CAAqB;AAC9BU,QAAAA,MAAM,GAAGA,MAAM,CAACT,OAAP,CAAe,IAAIC,MAAJ,aAAgBF,CAAhB,SAAuB,GAAvB,CAAf,EAA4CJ,UAAU,CAACI,CAAD,CAAtD,CAAT;AACD;AAHiB;AAAA;AAAA;AAAA;AAAA;AAInB;;AAED,SAAOU,MAAP;AACD,C","sourcesContent":["import { appEnv } from '../constants/Env.constant';\nimport { globalStrings } from '../languages/global.lang';\n\nexport class TS {\n  public static replaceTemplateStrings = (str: string, customVars: object) => {\n    const customVarsKeys = Object.keys(customVars);\n    if (customVarsKeys) {\n      for (const k of customVarsKeys) {\n        str = str.replace(new RegExp(`{{${k}}}`, \"g\"), customVars[k]);\n      }\n    }\n\n    return str;\n  };\n\n  public static string = (\n    model: any = null,\n    key: string,\n    customVars: object = {}\n  ) => {\n    if (!model) {\n      // pass only the global strings\n      return TS.replaceTemplateStrings(\n        globalStrings[key][appEnv.language],\n        customVars\n      );\n    }\n\n    // load language strings for a specific model\n\n    const { strings } = require(`../languages/${model}.lang.ts`);\n\n    // add our global generic strings\n    const languageStrings = {\n      ...strings,\n      ...globalStrings\n    };\n\n    let string: string = languageStrings[key][appEnv.language];\n    const customVarsKeys = Object.keys(customVars);\n    if (customVarsKeys) {\n      for (const k of customVarsKeys) {\n        string = string.replace(new RegExp(`{{${k}}}`, \"g\"), customVars[k]);\n      }\n    }\n\n    return string;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}