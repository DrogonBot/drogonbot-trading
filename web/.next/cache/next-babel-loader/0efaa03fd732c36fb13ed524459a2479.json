{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport 'moment/locale/pt-br';\nimport moment from 'moment';\nimport { appEnv } from '../constants/Env.constant';\nimport { AvailableLanguages } from '../types/Global.types';\nexport var DateHelper = function DateHelper() {\n  _classCallCheck(this, DateHelper);\n};\n\n_defineProperty(DateHelper, \"displayHumanDate\", function (date) {\n  switch (appEnv.language) {\n    case AvailableLanguages.ptBr:\n      return moment(date).locale(\"pt-br\").format(\"ddd, DD MMM YY\");\n\n    case AvailableLanguages.eng:\n      return moment(date).locale(\"en\").format(\"ddd, MMM Do YY\");\n\n    default:\n      return moment(date).locale(\"en\").format(\"ddd, MMM Do YY\");\n  }\n});\n\n_defineProperty(DateHelper, \"_analyzeDate\", function (inputFormat, separator) {\n  var splittedData = inputFormat.split(separator);\n  var dataComponentsPosition = {\n    month: {\n      index: 0,\n      characters: 0\n    },\n    year: {\n      index: 0,\n      characters: 0\n    },\n    day: {\n      index: 0,\n      characters: 0\n    }\n  }; // tslint:disable-next-line: forin\n\n  for (var index in splittedData) {\n    if (splittedData[index].includes(\"D\")) {\n      dataComponentsPosition.day.index = parseInt(index);\n      dataComponentsPosition.day.characters = splittedData[index].length;\n    }\n\n    if (splittedData[index].includes(\"M\")) {\n      dataComponentsPosition.month.index = parseInt(index);\n      dataComponentsPosition.month.characters = splittedData[index].length;\n    }\n\n    if (splittedData[index].includes(\"Y\")) {\n      dataComponentsPosition.year.index = parseInt(index);\n      dataComponentsPosition.year.characters = splittedData[index].length;\n    }\n  }\n\n  return dataComponentsPosition;\n});\n\n_defineProperty(DateHelper, \"parseDataToServerFormat\", function (rawData, inputFormat, separator) {\n  var splittedRawData = rawData.split(separator);\n\n  var analyzedInputFormat = DateHelper._analyzeDate(inputFormat, separator);\n\n  var month = splittedRawData[analyzedInputFormat.month.index];\n  var day = splittedRawData[analyzedInputFormat.day.index];\n  var year = splittedRawData[analyzedInputFormat.year.index]; // this function will always output to this format: MM/DD/YYYY (server accepted format)\n\n  return \"\".concat(month).concat(separator).concat(day).concat(separator).concat(year);\n});","map":null,"metadata":{},"sourceType":"module"}