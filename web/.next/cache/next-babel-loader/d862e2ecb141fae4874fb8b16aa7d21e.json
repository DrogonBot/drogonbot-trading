{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { appEnv } from '../constants/Env.constant';\nimport { globalStrings } from '../languages/global.lang';\nexport class TS {}\n\n_defineProperty(TS, \"replaceTemplateStrings\", (str, customVars) => {\n  const customVarsKeys = Object.keys(customVars);\n\n  if (customVarsKeys) {\n    for (const k of customVarsKeys) {\n      str = str.replace(new RegExp(`{{${k}}}`, \"g\"), customVars[k]);\n    }\n  }\n\n  return str;\n});\n\n_defineProperty(TS, \"string\", (model = null, key, customVars = {}) => {\n  if (!model) {\n    // pass only the global strings\n    return TS.replaceTemplateStrings(globalStrings[key][appEnv.language], customVars);\n  } // load language strings for a specific model\n\n\n  const {\n    strings\n  } = require(`../languages/${model}.lang.ts`); // add our global generic strings\n\n\n  const languageStrings = _objectSpread({}, strings, {}, globalStrings);\n\n  let string = languageStrings[key][appEnv.language];\n  const customVarsKeys = Object.keys(customVars);\n\n  if (customVarsKeys) {\n    for (const k of customVarsKeys) {\n      string = string.replace(new RegExp(`{{${k}}}`, \"g\"), customVars[k]);\n    }\n  }\n\n  return string;\n});","map":{"version":3,"sources":["/home/jonit/Personal_projects/emprego-urgente/empregourgente-backend/web/src/helpers/LanguageHelper.ts"],"names":["appEnv","globalStrings","TS","str","customVars","customVarsKeys","Object","keys","k","replace","RegExp","model","key","replaceTemplateStrings","language","strings","require","languageStrings","string"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,2BAAvB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AAEA,OAAO,MAAMC,EAAN,CAAS;;gBAAHA,E,4BAC4B,CAACC,GAAD,EAAcC,UAAd,KAAqC;AAC1E,QAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAAvB;;AACA,MAAIC,cAAJ,EAAoB;AAClB,SAAK,MAAMG,CAAX,IAAgBH,cAAhB,EAAgC;AAC9BF,MAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAY,IAAIC,MAAJ,CAAY,KAAIF,CAAE,IAAlB,EAAuB,GAAvB,CAAZ,EAAyCJ,UAAU,CAACI,CAAD,CAAnD,CAAN;AACD;AACF;;AAED,SAAOL,GAAP;AACD,C;;gBAVUD,E,YAYY,CACrBS,KAAU,GAAG,IADQ,EAErBC,GAFqB,EAGrBR,UAAkB,GAAG,EAHA,KAIlB;AACH,MAAI,CAACO,KAAL,EAAY;AACV;AACA,WAAOT,EAAE,CAACW,sBAAH,CACLZ,aAAa,CAACW,GAAD,CAAb,CAAmBZ,MAAM,CAACc,QAA1B,CADK,EAELV,UAFK,CAAP;AAID,GAPE,CASH;;;AAEA,QAAM;AAAEW,IAAAA;AAAF,MAAcC,OAAO,CAAE,gBAAeL,KAAM,UAAvB,CAA3B,CAXG,CAaH;;;AACA,QAAMM,eAAe,qBAChBF,OADgB,MAEhBd,aAFgB,CAArB;;AAKA,MAAIiB,MAAc,GAAGD,eAAe,CAACL,GAAD,CAAf,CAAqBZ,MAAM,CAACc,QAA5B,CAArB;AACA,QAAMT,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,CAAvB;;AACA,MAAIC,cAAJ,EAAoB;AAClB,SAAK,MAAMG,CAAX,IAAgBH,cAAhB,EAAgC;AAC9Ba,MAAAA,MAAM,GAAGA,MAAM,CAACT,OAAP,CAAe,IAAIC,MAAJ,CAAY,KAAIF,CAAE,IAAlB,EAAuB,GAAvB,CAAf,EAA4CJ,UAAU,CAACI,CAAD,CAAtD,CAAT;AACD;AACF;;AAED,SAAOU,MAAP;AACD,C","sourcesContent":["import { appEnv } from '../constants/Env.constant';\nimport { globalStrings } from '../languages/global.lang';\n\nexport class TS {\n  public static replaceTemplateStrings = (str: string, customVars: object) => {\n    const customVarsKeys = Object.keys(customVars);\n    if (customVarsKeys) {\n      for (const k of customVarsKeys) {\n        str = str.replace(new RegExp(`{{${k}}}`, \"g\"), customVars[k]);\n      }\n    }\n\n    return str;\n  };\n\n  public static string = (\n    model: any = null,\n    key: string,\n    customVars: object = {}\n  ) => {\n    if (!model) {\n      // pass only the global strings\n      return TS.replaceTemplateStrings(\n        globalStrings[key][appEnv.language],\n        customVars\n      );\n    }\n\n    // load language strings for a specific model\n\n    const { strings } = require(`../languages/${model}.lang.ts`);\n\n    // add our global generic strings\n    const languageStrings = {\n      ...strings,\n      ...globalStrings\n    };\n\n    let string: string = languageStrings[key][appEnv.language];\n    const customVarsKeys = Object.keys(customVars);\n    if (customVarsKeys) {\n      for (const k of customVarsKeys) {\n        string = string.replace(new RegExp(`{{${k}}}`, \"g\"), customVars[k]);\n      }\n    }\n\n    return string;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}