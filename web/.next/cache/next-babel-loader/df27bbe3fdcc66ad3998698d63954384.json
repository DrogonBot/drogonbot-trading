{"ast":null,"code":"import { APIHelper } from '../../helpers/APIHelper';\nimport { TS } from '../../helpers/LanguageHelper';\nimport { RequestTypes } from '../../types/Request.types';\nimport { CLEAR_JOB_ROLES, READ_CITIES, READ_COUNTRIES, READ_JOB_ROLES, READ_SECTORS, READ_STATES, WIZARD_FORM_UPDATE_CURRENT_STEP, WIZARD_FORM_UPDATE_TOTAL_STEPS } from '../reducers/form.reducer';\nimport { setLoading } from './ui.action';\nexport const loadCountries = () => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/country`, {}, false);\n\n  if (response) {\n    const data = response.data;\n    await dispatch(setLoading(false, \"loadingLocation\"));\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_COUNTRIES,\n      payload: data\n    });\n  }\n};\nexport const loadCountryProvinces = (country, addDefaultOption = false) => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/places/${country}?statesOnly=true`, {}, false);\n\n  if (response) {\n    let data = response.data;\n\n    if (addDefaultOption) {\n      // adds default option if needed\n      data = [{\n        stateName: TS.string(\"form\", \"selectProvinceText\"),\n        stateCode: \"default\"\n      }, ...data];\n    }\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_STATES,\n      payload: data\n    });\n  }\n};\nexport const loadProvinceCities = (country, stateCode) => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/places/${country}/${stateCode}?citiesOnly=true`, {}, false);\n\n  if (response) {\n    const data = response.data;\n    await dispatch(setLoading(false, \"loadingLocation\"));\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_CITIES,\n      payload: data\n    });\n  }\n};\nexport const loadJobRoles = keyword => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/sectors/search/${keyword}`, {}, true);\n\n  if (response) {\n    const data = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_JOB_ROLES,\n      payload: data\n    });\n  }\n};\nexport const readSectors = country => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/sectors/${country}`, {}, true);\n\n  if (response) {\n    const data = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_SECTORS,\n      payload: data\n    });\n  }\n};\nexport const clearJobRoles = () => dispatch => {\n  dispatch({\n    type: CLEAR_JOB_ROLES\n  });\n};\nexport const wizardFormUpdateCurrentStep = (key, currentStep) => async dispatch => {\n  dispatch({\n    type: WIZARD_FORM_UPDATE_CURRENT_STEP,\n    payload: {\n      key,\n      currentStep\n    }\n  });\n};\nexport const wizardFormUpdateTotalSteps = (key, totalSteps) => async dispatch => {\n  dispatch({\n    type: WIZARD_FORM_UPDATE_TOTAL_STEPS,\n    payload: {\n      key,\n      totalSteps\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}