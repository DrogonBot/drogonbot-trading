{"ast":null,"code":"var __jsx = React.createElement;\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport withRedux from 'next-redux-wrapper';\nimport App from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { NextSEOApp } from '../components/seo/NextSEOApp';\nimport { MUITheme } from '../constants/UI/Theme.constant';\nimport { persistor, store } from '../store/reducers/persist.store';\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {}; // Anything returned here can be accessed by the client\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    // pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\n    // @ts-ignore\n    const {\n      Component,\n      pageProps,\n      store: initialStore\n    } = this.props;\n    return __jsx(Provider, {\n      store: initialStore\n    }, __jsx(PersistGate, {\n      loading: null,\n      persistor: persistor\n    }, __jsx(NextSEOApp, null), __jsx(ThemeProvider, {\n      theme: MUITheme\n    }, __jsx(Component, pageProps))));\n  }\n\n} // makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store; // withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(makeStore)(MyApp);","map":null,"metadata":{},"sourceType":"module"}