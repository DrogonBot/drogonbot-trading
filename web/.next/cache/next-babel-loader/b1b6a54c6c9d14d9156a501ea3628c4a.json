{"ast":null,"code":"import { APIHelper } from '../../helpers/APIHelper';\nimport { TS } from '../../helpers/LanguageHelper';\nimport { RequestTypes } from '../../types/Request.types';\nimport { CLEAR_JOB_ROLES, READ_CITIES, READ_COUNTRIES, READ_JOB_ROLES, READ_SECTORS, READ_STATES, WIZARD_FORM_UPDATE_CURRENT_STEP, WIZARD_FORM_UPDATE_TOTAL_STEPS } from '../reducers/form.reducer';\nimport { setLoading } from './ui.action';\nexport const loadCountries = () => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/country`, {}, false);\n\n  if (response) {\n    const data = response.data;\n    await dispatch(setLoading(false, \"loadingLocation\"));\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_COUNTRIES,\n      payload: data\n    });\n  }\n};\nexport const loadCountryProvinces = (country, addDefaultOption = false) => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/places/${country}?statesOnly=true`, {}, false);\n\n  if (response) {\n    let data = response.data;\n\n    if (addDefaultOption) {\n      // adds default option if needed\n      data = [{\n        stateName: TS.string(\"form\", \"selectProvinceText\"),\n        stateCode: \"default\"\n      }, ...data];\n    }\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_STATES,\n      payload: data\n    });\n  }\n};\nexport const loadProvinceCities = (country, stateCode) => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/places/${country}/${stateCode}?citiesOnly=true`, {}, false);\n\n  if (response) {\n    const data = response.data;\n    await dispatch(setLoading(false, \"loadingLocation\"));\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_CITIES,\n      payload: data\n    });\n  }\n};\nexport const loadJobRoles = keyword => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/sectors/search/${keyword}`, {}, true);\n\n  if (response) {\n    const data = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_JOB_ROLES,\n      payload: data\n    });\n  }\n};\nexport const readSectors = country => async dispatch => {\n  const response = await APIHelper.request(RequestTypes.GET, `/sectors/${country}`, {}, true);\n\n  if (response) {\n    const data = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({\n      type: READ_SECTORS,\n      payload: data\n    });\n  }\n};\nexport const clearJobRoles = () => dispatch => {\n  dispatch({\n    type: CLEAR_JOB_ROLES\n  });\n};\nexport const wizardFormUpdateCurrentStep = (key, currentStep) => async dispatch => {\n  dispatch({\n    type: WIZARD_FORM_UPDATE_CURRENT_STEP,\n    payload: {\n      key,\n      currentStep\n    }\n  });\n};\nexport const wizardFormUpdateTotalSteps = (key, totalSteps) => async dispatch => {\n  dispatch({\n    type: WIZARD_FORM_UPDATE_TOTAL_STEPS,\n    payload: {\n      key,\n      totalSteps\n    }\n  });\n};","map":{"version":3,"sources":["/home/jonit/Personal_projects/emprego-urgente/empregourgente-backend/web/src/store/actions/form.actions.ts"],"names":["APIHelper","TS","RequestTypes","CLEAR_JOB_ROLES","READ_CITIES","READ_COUNTRIES","READ_JOB_ROLES","READ_SECTORS","READ_STATES","WIZARD_FORM_UPDATE_CURRENT_STEP","WIZARD_FORM_UPDATE_TOTAL_STEPS","setLoading","loadCountries","dispatch","response","request","GET","data","status","alert","message","type","payload","loadCountryProvinces","country","addDefaultOption","stateName","string","stateCode","loadProvinceCities","loadJobRoles","keyword","readSectors","clearJobRoles","wizardFormUpdateCurrentStep","key","currentStep","wizardFormUpdateTotalSteps","totalSteps"],"mappings":"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","sourcesContent":["import { APIHelper } from '../../helpers/APIHelper';\nimport { TS } from '../../helpers/LanguageHelper';\nimport { ICityResponse, ICountry, IJobRole, IProvince, ISector } from '../../types/Form.types';\nimport { RequestTypes } from '../../types/Request.types';\nimport {\n  CLEAR_JOB_ROLES,\n  READ_CITIES,\n  READ_COUNTRIES,\n  READ_JOB_ROLES,\n  READ_SECTORS,\n  READ_STATES,\n  WIZARD_FORM_UPDATE_CURRENT_STEP,\n  WIZARD_FORM_UPDATE_TOTAL_STEPS,\n} from '../reducers/form.reducer';\nimport { setLoading } from './ui.action';\n\nexport const loadCountries = () => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/country`,\n    {},\n    false\n  );\n\n  if (response) {\n    const data: ICountry[] = response.data;\n\n    await dispatch(setLoading(false, \"loadingLocation\"));\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_COUNTRIES, payload: data });\n  }\n};\nexport const loadCountryProvinces = (\n  country: string,\n  addDefaultOption: boolean = false\n) => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/places/${country}?statesOnly=true`,\n    {},\n    false\n  );\n\n  if (response) {\n    let data: IProvince[] = response.data;\n\n    if (addDefaultOption) {\n      // adds default option if needed\n      data = [\n        {\n          stateName: TS.string(\"form\", \"selectProvinceText\"),\n          stateCode: \"default\",\n        },\n        ...data,\n      ];\n    }\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_STATES, payload: data });\n  }\n};\n\nexport const loadProvinceCities = (\n  country: string,\n  stateCode: string\n) => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/places/${country}/${stateCode}?citiesOnly=true`,\n    {},\n    false\n  );\n\n  if (response) {\n    const data: ICityResponse[] = response.data;\n\n    await dispatch(setLoading(false, \"loadingLocation\"));\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_CITIES, payload: data });\n  }\n};\n\nexport const loadJobRoles = (keyword: string) => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/sectors/search/${keyword}`,\n    {},\n    true\n  );\n\n  if (response) {\n    const data: IJobRole[] = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_JOB_ROLES, payload: data });\n  }\n};\n\nexport const readSectors = (country: string) => async (dispatch) => {\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/sectors/${country}`,\n    {},\n    true\n  );\n\n  if (response) {\n    const data: ISector[] = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    dispatch({ type: READ_SECTORS, payload: data });\n  }\n};\n\nexport const clearJobRoles = () => (dispatch) => {\n  dispatch({ type: CLEAR_JOB_ROLES });\n};\n\nexport const wizardFormUpdateCurrentStep = (\n  key: string,\n  currentStep: number\n) => async (dispatch) => {\n  dispatch({\n    type: WIZARD_FORM_UPDATE_CURRENT_STEP,\n    payload: {\n      key,\n      currentStep,\n    },\n  });\n};\nexport const wizardFormUpdateTotalSteps = (\n  key: string,\n  totalSteps: number\n) => async (dispatch) => {\n  dispatch({\n    type: WIZARD_FORM_UPDATE_TOTAL_STEPS,\n    payload: {\n      key,\n      totalSteps,\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}