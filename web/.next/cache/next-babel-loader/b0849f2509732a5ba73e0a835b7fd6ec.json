{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'lodash';\nconst INITIAL_STATE = {\n  posts: [],\n  post: null // individual post page\n\n};\nexport const postReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case POST_READ_ONE:\n      return _objectSpread({}, state, {\n        post: action.payload\n      });\n\n    case POST_READ:\n      return _objectSpread({}, state, {\n        posts: action.payload\n      });\n\n    case POST_READ_ADD:\n      const uniquePosts = _.uniqBy([...state.posts, ...action.payload], function (post) {\n        return post._id;\n      });\n\n      return _objectSpread({}, state, {\n        posts: uniquePosts // make sure its unique\n\n      });\n\n    case POST_UPDATE:\n      const updatedPost = action.payload;\n      const updatedPosts = state.posts.map(post => {\n        // find the post that we want to replace and replace it\n        if (post._id === updatedPost._id) {\n          return updatedPost;\n        }\n\n        return post;\n      }); // then update our state with our updated posts\n\n      return _objectSpread({}, state, {\n        posts: updatedPosts\n      });\n\n    case POST_DELETE:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(post => post._id !== action.payload)\n      });\n\n    case POST_CLEAR:\n      return {\n        posts: INITIAL_STATE.posts\n      };\n\n    default:\n      return state;\n  }\n};\nexport const POST_CREATE = \"POST_CREATE\";\nexport const POST_READ = \"POST_READ\";\nexport const POST_READ_ADD = \"POST_READ_ADD\";\nexport const POST_UPDATE = \"POST_UPDATE\";\nexport const POST_DELETE = \"POST_DELETE\";\nexport const POST_CLEAR = \"POST_CLEAR\";\nexport const POST_READ_ONE = \"POST_READ_ONE\";","map":{"version":3,"sources":["/usr/src/app/src/store/reducers/post.reducer.ts"],"names":["_","INITIAL_STATE","posts","post","postReducer","state","action","type","POST_READ_ONE","payload","POST_READ","POST_READ_ADD","uniquePosts","uniqBy","_id","POST_UPDATE","updatedPost","updatedPosts","map","POST_DELETE","filter","POST_CLEAR","POST_CREATE"],"mappings":";;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AASA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,IAAI,EAAE,IAFc,CAER;;AAFQ,CAAtB;AAKA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAa,GAAGJ,aAAjB,EAAgCK,MAAhC,KAA2C;AACpE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKC,aAAL;AACE,+BACKH,KADL;AAEEF,QAAAA,IAAI,EAAEG,MAAM,CAACG;AAFf;;AAKF,SAAKC,SAAL;AACE,+BAAYL,KAAZ;AAAmBH,QAAAA,KAAK,EAAEI,MAAM,CAACG;AAAjC;;AACF,SAAKE,aAAL;AACE,YAAMC,WAAW,GAAGZ,CAAC,CAACa,MAAF,CAClB,CAAC,GAAGR,KAAK,CAACH,KAAV,EAAiB,GAAGI,MAAM,CAACG,OAA3B,CADkB,EAElB,UAASN,IAAT,EAAe;AACb,eAAOA,IAAI,CAACW,GAAZ;AACD,OAJiB,CAApB;;AAOA,+BACKT,KADL;AAEEH,QAAAA,KAAK,EAAEU,WAFT,CAEsB;;AAFtB;;AAKF,SAAKG,WAAL;AACE,YAAMC,WAAW,GAAGV,MAAM,CAACG,OAA3B;AAEA,YAAMQ,YAAY,GAAGZ,KAAK,CAACH,KAAN,CAAYgB,GAAZ,CAAiBf,IAAD,IAAe;AAClD;AACA,YAAIA,IAAI,CAACW,GAAL,KAAaE,WAAW,CAACF,GAA7B,EAAkC;AAChC,iBAAOE,WAAP;AACD;;AACD,eAAOb,IAAP;AACD,OANoB,CAArB,CAHF,CAWE;;AACA,+BAAYE,KAAZ;AAAmBH,QAAAA,KAAK,EAAEe;AAA1B;;AAEF,SAAKE,WAAL;AACE,+BACKd,KADL;AAEEH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYkB,MAAZ,CAAoBjB,IAAD,IAAeA,IAAI,CAACW,GAAL,KAAaR,MAAM,CAACG,OAAtD;AAFT;;AAIF,SAAKY,UAAL;AACE,aAAO;AACLnB,QAAAA,KAAK,EAAED,aAAa,CAACC;AADhB,OAAP;;AAIF;AACE,aAAOG,KAAP;AA/CJ;AAiDD,CAlDM;AAoDP,OAAO,MAAMiB,WAAW,GAAG,aAApB;AACP,OAAO,MAAMZ,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMI,WAAW,GAAG,aAApB;AACP,OAAO,MAAMI,WAAW,GAAG,aAApB;AACP,OAAO,MAAME,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMb,aAAa,GAAG,eAAtB","sourcesContent":["import _ from 'lodash';\n\nimport { IPost } from '../../types/Post.types';\n\ninterface IState {\n  posts: IPost[];\n  post: IPost | null;\n}\n\nconst INITIAL_STATE = {\n  posts: [],\n  post: null, // individual post page\n};\n\nexport const postReducer = (state: IState = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case POST_READ_ONE:\n      return {\n        ...state,\n        post: action.payload,\n      };\n\n    case POST_READ:\n      return { ...state, posts: action.payload };\n    case POST_READ_ADD:\n      const uniquePosts = _.uniqBy(\n        [...state.posts, ...action.payload],\n        function(post) {\n          return post._id;\n        }\n      );\n\n      return {\n        ...state,\n        posts: uniquePosts, // make sure its unique\n      };\n\n    case POST_UPDATE:\n      const updatedPost = action.payload;\n\n      const updatedPosts = state.posts.map((post: any) => {\n        // find the post that we want to replace and replace it\n        if (post._id === updatedPost._id) {\n          return updatedPost;\n        }\n        return post;\n      });\n\n      // then update our state with our updated posts\n      return { ...state, posts: updatedPosts };\n\n    case POST_DELETE:\n      return {\n        ...state,\n        posts: state.posts.filter((post: any) => post._id !== action.payload),\n      };\n    case POST_CLEAR:\n      return {\n        posts: INITIAL_STATE.posts,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const POST_CREATE = \"POST_CREATE\";\nexport const POST_READ = \"POST_READ\";\nexport const POST_READ_ADD = \"POST_READ_ADD\";\nexport const POST_UPDATE = \"POST_UPDATE\";\nexport const POST_DELETE = \"POST_DELETE\";\nexport const POST_CLEAR = \"POST_CLEAR\";\nexport const POST_READ_ONE = \"POST_READ_ONE\";\n"]},"metadata":{},"sourceType":"module"}