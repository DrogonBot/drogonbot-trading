{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { APIHelper } from '../../helpers/APIHelper';\nimport { GenericHelper } from '../../helpers/GenericHelper';\nimport { RequestTypes } from '../../types/Request.types';\nimport { POST_CLEAR, POST_READ, POST_READ_ADD, POST_READ_ONE } from '../reducers/post.reducer';\nimport { setPaginationKeyValues } from './ui.action';\nexport var postRead = function postRead() {\n  var addToEnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var page = arguments.length > 1 ? arguments[1] : undefined;\n  var limit = arguments.length > 2 ? arguments[2] : undefined;\n  var keyword = arguments.length > 3 ? arguments[3] : undefined;\n  var stateCode = arguments.length > 4 ? arguments[4] : undefined;\n  return (// filter by province stateCode\n    function _callee(dispatch) {\n      var postUrl, response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              postUrl = GenericHelper.generateUrlParams(\"/post\", {\n                page: page,\n                limit: limit,\n                keyword: keyword,\n                stateCode: stateCode\n              });\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, postUrl, {}, false));\n\n            case 3:\n              response = _context.sent;\n\n              if (!response) {\n                _context.next = 10;\n                break;\n              }\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              alert(response.data.message);\n              return _context.abrupt(\"return\");\n\n            case 8:\n              dispatch({\n                type: addToEnd ? POST_READ_ADD : POST_READ,\n                payload: response.data.docs\n              });\n              return _context.abrupt(\"return\", response.data);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  );\n};\nexport var postReadFeed = function postReadFeed(page, limit, provinceData, keywordData, addToEnd) {\n  return function _callee2(dispatch) {\n    var payload;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(postRead(addToEnd, page, limit, keywordData, provinceData)));\n\n          case 2:\n            payload = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(dispatch(setPaginationKeyValues(payload)));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var postClearAll = function postClearAll() {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: POST_CLEAR\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var postReadOne = function postReadOne(id, slug) {\n  return function _callee4(dispatch) {\n    var requestUrl, response, data;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (id) {\n              requestUrl = \"?id=\".concat(id);\n            }\n\n            if (slug) {\n              requestUrl = \"?slug=\".concat(slug);\n            }\n\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(APIHelper.request(RequestTypes.GET, \"/post/\".concat(requestUrl), {}, false));\n\n          case 4:\n            response = _context4.sent;\n\n            if (!response) {\n              _context4.next = 10;\n              break;\n            }\n\n            data = response.data;\n\n            if (response.status !== 200) {\n              alert(response.data.message);\n            }\n\n            _context4.next = 10;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: POST_READ_ONE,\n              payload: data\n            }));\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/usr/src/app/src/store/actions/post.action.ts"],"names":["APIHelper","GenericHelper","RequestTypes","POST_CLEAR","POST_READ","POST_READ_ADD","POST_READ_ONE","setPaginationKeyValues","postRead","addToEnd","page","limit","keyword","stateCode","dispatch","postUrl","generateUrlParams","request","GET","response","status","alert","data","message","type","payload","docs","postReadFeed","provinceData","keywordData","postClearAll","postReadOne","id","slug","requestUrl"],"mappings":"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","sourcesContent":["import { APIHelper } from '../../helpers/APIHelper';\nimport { GenericHelper } from '../../helpers/GenericHelper';\nimport { IPost } from '../../types/Post.types';\nimport { RequestTypes } from '../../types/Request.types';\nimport { IPaginationData } from '../../types/UI.types';\nimport { POST_CLEAR, POST_READ, POST_READ_ADD, POST_READ_ONE } from '../reducers/post.reducer';\nimport { setPaginationKeyValues } from './ui.action';\n\nexport const postRead = (\n  addToEnd: boolean = false,\n  page?: number,\n  limit?: number,\n  keyword?: string | null,\n  stateCode?: string | null // filter by province stateCode\n) => async (dispatch) => {\n  const postUrl = GenericHelper.generateUrlParams(\"/post\", {\n    page,\n    limit,\n    keyword,\n    stateCode,\n  });\n\n  const response: any = await APIHelper.request(\n    RequestTypes.GET,\n    postUrl,\n    {},\n    false\n  );\n\n  if (response) {\n    if (response.status !== 200) {\n      alert(response.data.message);\n      return;\n    }\n\n    dispatch({\n      type: addToEnd ? POST_READ_ADD : POST_READ,\n      payload: response.data.docs,\n    });\n\n    return response.data;\n  }\n};\n\nexport const postReadFeed = (\n  page: number,\n  limit: number,\n  provinceData: string,\n  keywordData?: string,\n  addToEnd?: boolean\n) => async (dispatch) => {\n  // @ts-ignore\n  const payload: IPaginationData = await dispatch(\n    postRead(addToEnd, page, limit, keywordData, provinceData)\n  );\n  await dispatch(setPaginationKeyValues(payload)); // save new pagination loading values\n};\n\nexport const postClearAll = () => async (dispatch) => {\n  await dispatch({\n    type: POST_CLEAR,\n  });\n};\n\nexport const postReadOne = (id?, slug?) => async (dispatch) => {\n  let requestUrl;\n  if (id) {\n    requestUrl = `?id=${id}`;\n  }\n\n  if (slug) {\n    requestUrl = `?slug=${slug}`;\n  }\n\n  const response = await APIHelper.request(\n    RequestTypes.GET,\n    `/post/${requestUrl}`,\n    {},\n    false\n  );\n\n  if (response) {\n    const data: IPost = response.data;\n\n    if (response.status !== 200) {\n      alert(response.data.message);\n    }\n\n    await dispatch({\n      type: POST_READ_ONE,\n      payload: data,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}