{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _ from 'lodash';\nvar INITIAL_STATE = {\n  posts: [],\n  post: null // individual post page\n\n};\nexport var postReducer = function postReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case POST_READ_ONE:\n      return _objectSpread({}, state, {\n        post: action.payload\n      });\n\n    case POST_READ:\n      return _objectSpread({}, state, {\n        posts: action.payload\n      });\n\n    case POST_READ_ADD:\n      var uniquePosts = _.uniqBy([].concat(_toConsumableArray(state.posts), _toConsumableArray(action.payload)), function (post) {\n        return post._id;\n      });\n\n      return _objectSpread({}, state, {\n        posts: uniquePosts // make sure its unique\n\n      });\n\n    case POST_UPDATE:\n      var updatedPost = action.payload;\n      var updatedPosts = state.posts.map(function (post) {\n        // find the post that we want to replace and replace it\n        if (post._id === updatedPost._id) {\n          return updatedPost;\n        }\n\n        return post;\n      }); // then update our state with our updated posts\n\n      return _objectSpread({}, state, {\n        posts: updatedPosts\n      });\n\n    case POST_DELETE:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(function (post) {\n          return post._id !== action.payload;\n        })\n      });\n\n    case POST_CLEAR:\n      return {\n        posts: INITIAL_STATE.posts\n      };\n\n    default:\n      return state;\n  }\n};\nexport var POST_CREATE = \"POST_CREATE\";\nexport var POST_READ = \"POST_READ\";\nexport var POST_READ_ADD = \"POST_READ_ADD\";\nexport var POST_UPDATE = \"POST_UPDATE\";\nexport var POST_DELETE = \"POST_DELETE\";\nexport var POST_CLEAR = \"POST_CLEAR\";\nexport var POST_READ_ONE = \"POST_READ_ONE\";","map":null,"metadata":{},"sourceType":"module"}