{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { appEnv, ENV, EnvironmentTypes } from '../constants/Env.constant';\nimport { TS } from './LanguageHelper';\nexport class APIHelper {}\n\n_defineProperty(APIHelper, \"request\", async (method, url, data, useAuth = true, customHeaders = {}, onTimeoutCallback = () => null, timeout = 5000) => {\n  let AUTH_HEADERS;\n\n  try {\n    if (useAuth) {\n      const token = await window.localStorage.getItem(\"token\");\n      AUTH_HEADERS = {\n        Authorization: `Bearer ${token}`,\n        \"Content-type\": \"application/json\"\n      };\n    }\n\n    const GUEST_HEADERS = {\n      \"Content-type\": \"application/json\"\n    }; // prepare connection timeout callback\n\n    const abort = axios.CancelToken.source();\n    const timeoutCallback = setTimeout(() => {\n      abort.cancel(`Timeout of ${timeout}ms.`);\n\n      if (onTimeoutCallback() !== null) {\n        onTimeoutCallback();\n      } else {\n        console.log(\"request timeout\");\n        alert(TS.string(\"global\", \"requestTimeoutTitle\"));\n        Router.push(\"/login\");\n      }\n    }, timeout);\n\n    if (ENV === EnvironmentTypes.Development) {\n      console.log(`Request to: ${appEnv.serverUrl}${url}`);\n    } // execute request\n\n\n    const response = await axios({\n      method,\n      url: `${appEnv.serverUrl}${url}`,\n      data,\n      cancelToken: abort.token,\n\n      validateStatus(status) {\n        return status >= 200 && status <= 500; // default\n      },\n\n      headers: useAuth ? _objectSpread({}, AUTH_HEADERS, {}, customHeaders) : _objectSpread({}, GUEST_HEADERS, {}, customHeaders)\n    }); // If user is not authenticated...\n    // 401 = Unauthorized status\n\n    if (response.status === 401) {\n      console.log(\"User is not authenticated. Redirecting to Login...\"); // clear current redux store\n      // persistor.purge();\n\n      console.log(\"authentication error\");\n      alert(TS.string(\"account\", \"loginUserNotAuthenticated\"));\n      Router.push(\"/login\"); // NavigationHelper.navigate(\"Auth\", null);\n    }\n\n    clearTimeout(timeoutCallback);\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n});","map":{"version":3,"sources":["/home/jonit/Personal_projects/emprego-urgente/empregourgente-backend/web/src/helpers/APIHelper.ts"],"names":["axios","Router","appEnv","ENV","EnvironmentTypes","TS","APIHelper","method","url","data","useAuth","customHeaders","onTimeoutCallback","timeout","AUTH_HEADERS","token","window","localStorage","getItem","Authorization","GUEST_HEADERS","abort","CancelToken","source","timeoutCallback","setTimeout","cancel","console","log","alert","string","push","Development","serverUrl","response","cancelToken","validateStatus","status","headers","clearTimeout","error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,gBAAtB,QAA8C,2BAA9C;AACA,SAASC,EAAT,QAAmB,kBAAnB;AAEA,OAAO,MAAMC,SAAN,CAAgB;;gBAAVA,S,aACa,OACtBC,MADsB,EAEtBC,GAFsB,EAGtBC,IAHsB,EAItBC,OAAO,GAAG,IAJY,EAKtBC,aAAqB,GAAG,EALF,EAMtBC,iBAAiB,GAAG,MAAM,IANJ,EAOtBC,OAAO,GAAG,IAPY,KAQnB;AACH,MAAIC,YAAJ;;AACA,MAAI;AACF,QAAIJ,OAAJ,EAAa;AACX,YAAMK,KAAK,GAAG,MAAMC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAApB;AAEAJ,MAAAA,YAAY,GAAG;AACbK,QAAAA,aAAa,EAAG,UAASJ,KAAM,EADlB;AAEb,wBAAgB;AAFH,OAAf;AAID;;AAED,UAAMK,aAAa,GAAG;AACpB,sBAAgB;AADI,KAAtB,CAVE,CAcF;;AACA,UAAMC,KAAK,GAAGrB,KAAK,CAACsB,WAAN,CAAkBC,MAAlB,EAAd;AAEA,UAAMC,eAAe,GAAGC,UAAU,CAAC,MAAM;AACvCJ,MAAAA,KAAK,CAACK,MAAN,CAAc,cAAab,OAAQ,KAAnC;;AACA,UAAID,iBAAiB,OAAO,IAA5B,EAAkC;AAChCA,QAAAA,iBAAiB;AAClB,OAFD,MAEO;AACLe,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAC,QAAAA,KAAK,CAACxB,EAAE,CAACyB,MAAH,CAAU,QAAV,EAAoB,qBAApB,CAAD,CAAL;AACA7B,QAAAA,MAAM,CAAC8B,IAAP,CAAY,QAAZ;AACD;AACF,KATiC,EAS/BlB,OAT+B,CAAlC;;AAWA,QAAIV,GAAG,KAAKC,gBAAgB,CAAC4B,WAA7B,EAA0C;AACxCL,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAc1B,MAAM,CAAC+B,SAAU,GAAEzB,GAAI,EAAlD;AACD,KA9BC,CAgCF;;;AAIA,UAAM0B,QAAQ,GAAG,MAAMlC,KAAK,CAAC;AAC3BO,MAAAA,MAD2B;AAE3BC,MAAAA,GAAG,EAAG,GAAEN,MAAM,CAAC+B,SAAU,GAAEzB,GAAI,EAFJ;AAG3BC,MAAAA,IAH2B;AAI3B0B,MAAAA,WAAW,EAAEd,KAAK,CAACN,KAJQ;;AAK3BqB,MAAAA,cAAc,CAACC,MAAD,EAAS;AACrB,eAAOA,MAAM,IAAI,GAAV,IAAiBA,MAAM,IAAI,GAAlC,CADqB,CACkB;AACxC,OAP0B;;AAQ3BC,MAAAA,OAAO,EAAE5B,OAAO,qBACPI,YADO,MACUH,aADV,sBAEPS,aAFO,MAEWT,aAFX;AARW,KAAD,CAA5B,CApCE,CAiDF;AACA;;AACA,QAAIuB,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3BV,MAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ,EAD2B,CAE3B;AACA;;AAEAD,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAC,MAAAA,KAAK,CAACxB,EAAE,CAACyB,MAAH,CAAU,SAAV,EAAqB,2BAArB,CAAD,CAAL;AACA7B,MAAAA,MAAM,CAAC8B,IAAP,CAAY,QAAZ,EAP2B,CAQ3B;AACD;;AAEDQ,IAAAA,YAAY,CAACf,eAAD,CAAZ;AAEA,WAAOU,QAAP;AACD,GAjED,CAiEE,OAAOM,KAAP,EAAc;AACdb,IAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACD;AACF,C","sourcesContent":["import axios from 'axios';\nimport Router from 'next/router';\n\nimport { appEnv, ENV, EnvironmentTypes } from '../constants/Env.constant';\nimport { TS } from './LanguageHelper';\n\nexport class APIHelper {\n  public static request = async (\n    method: any,\n    url: string,\n    data: object,\n    useAuth = true,\n    customHeaders: object = {},\n    onTimeoutCallback = () => null,\n    timeout = 5000\n  ) => {\n    let AUTH_HEADERS;\n    try {\n      if (useAuth) {\n        const token = await window.localStorage.getItem(\"token\");\n\n        AUTH_HEADERS = {\n          Authorization: `Bearer ${token}`,\n          \"Content-type\": \"application/json\",\n        };\n      }\n\n      const GUEST_HEADERS = {\n        \"Content-type\": \"application/json\",\n      };\n\n      // prepare connection timeout callback\n      const abort = axios.CancelToken.source();\n\n      const timeoutCallback = setTimeout(() => {\n        abort.cancel(`Timeout of ${timeout}ms.`);\n        if (onTimeoutCallback() !== null) {\n          onTimeoutCallback();\n        } else {\n          console.log(\"request timeout\");\n          alert(TS.string(\"global\", \"requestTimeoutTitle\"));\n          Router.push(\"/login\");\n        }\n      }, timeout);\n\n      if (ENV === EnvironmentTypes.Development) {\n        console.log(`Request to: ${appEnv.serverUrl}${url}`);\n      }\n\n      // execute request\n\n\n\n      const response = await axios({\n        method,\n        url: `${appEnv.serverUrl}${url}`,\n        data,\n        cancelToken: abort.token,\n        validateStatus(status) {\n          return status >= 200 && status <= 500; // default\n        },\n        headers: useAuth\n          ? { ...AUTH_HEADERS, ...customHeaders }\n          : { ...GUEST_HEADERS, ...customHeaders },\n      });\n\n      // If user is not authenticated...\n      // 401 = Unauthorized status\n      if (response.status === 401) {\n        console.log(\"User is not authenticated. Redirecting to Login...\");\n        // clear current redux store\n        // persistor.purge();\n\n        console.log(\"authentication error\");\n        alert(TS.string(\"account\", \"loginUserNotAuthenticated\"));\n        Router.push(\"/login\");\n        // NavigationHelper.navigate(\"Auth\", null);\n      }\n\n      clearTimeout(timeoutCallback);\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}