{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { appEnv, ENV } from '../constants/Env.constant';\nimport { EnvironmentTypes } from '../types/Global.types';\nimport { TS } from './LanguageHelper';\nexport class APIHelper {}\n\n_defineProperty(APIHelper, \"request\", async (method, url, data, useAuth = true, customHeaders = {}, onTimeoutCallback = () => null, timeout = 5000) => {\n  let AUTH_HEADERS;\n\n  try {\n    if (useAuth) {\n      const token = await window.localStorage.getItem(\"token\");\n      AUTH_HEADERS = {\n        Authorization: `Bearer ${token}`,\n        \"Content-type\": \"application/json\"\n      };\n    }\n\n    const GUEST_HEADERS = {\n      \"Content-type\": \"application/json\"\n    }; // prepare connection timeout callback\n\n    const abort = axios.CancelToken.source();\n    const timeoutCallback = setTimeout(() => {\n      abort.cancel(`Timeout of ${timeout}ms.`);\n\n      if (onTimeoutCallback() !== null) {\n        onTimeoutCallback();\n      } else {\n        console.log(\"request timeout\");\n        alert(TS.string(\"global\", \"requestTimeoutTitle\"));\n        Router.push(\"/login\");\n      }\n    }, timeout);\n\n    if (ENV === EnvironmentTypes.Development) {\n      console.log(`Request to: ${appEnv.serverUrl}${url}`);\n    } // execute request\n\n\n    const response = await axios({\n      method,\n      url: `${appEnv.serverUrl}${url}`,\n      data,\n      cancelToken: abort.token,\n\n      validateStatus(status) {\n        return status >= 200 && status <= 500; // default\n      },\n\n      headers: useAuth ? _objectSpread({}, AUTH_HEADERS, {}, customHeaders) : _objectSpread({}, GUEST_HEADERS, {}, customHeaders)\n    }); // If user is not authenticated...\n    // 401 = Unauthorized status\n\n    if (response.status === 401) {\n      console.log(\"User is not authenticated. Redirecting to Login...\"); // clear current redux store\n      // persistor.purge();\n\n      console.log(\"authentication error\");\n      alert(TS.string(\"account\", \"loginUserNotAuthenticated\"));\n      Router.push(\"/login\"); // NavigationHelper.navigate(\"Auth\", null);\n    }\n\n    clearTimeout(timeoutCallback);\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}