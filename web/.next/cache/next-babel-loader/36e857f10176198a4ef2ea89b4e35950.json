{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/usr/src/app/src/components/elements/form/ProvinceSelector.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { MenuItem, Select } from '@material-ui/core';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { colors } from '../../../constants/UI/Colors.constant';\nimport { UI } from '../../../constants/UI/UI.constant';\nimport { setSearchKey } from '../../../store/actions/ui.action';\nexport var ProvinceSelector = function ProvinceSelector(_ref) {\n  var provinces = _ref.provinces;\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var searchKeyword = router.query.searchKeyword;\n\n  var _useSelector = useSelector(function (state) {\n    return state.uiReducer;\n  }),\n      searchProvince = _useSelector.searchProvince;\n\n  var onChangeProvince = function onChangeProvince(e) {\n    var selectedProvince;\n    return _regeneratorRuntime.async(function onChangeProvince$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            selectedProvince = e.target.value; //  update our redux (we'll need this info for our post requests)\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(setSearchKey(\"searchProvince\", selectedProvince)));\n\n          case 3:\n            if (searchKeyword) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 5:\n            router.push({\n              pathname: \"/posts\",\n              query: {\n                searchProvince: e.target.value,\n                searchKeyword: searchKeyword,\n                page: 1 // since its a new search, page will be always 1!\n\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onRenderProvinces = function onRenderProvinces() {\n    return provinces.map(function (province) {\n      return __jsx(MenuItem, {\n        key: province.stateName,\n        value: province.stateCode,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }\n      }, province.stateCode);\n    });\n  };\n\n  return __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(Select, {\n    value: searchProvince,\n    onChange: onChangeProvince,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, onRenderProvinces()));\n};\nvar Container = styled.div.withConfig({\n  displayName: \"ProvinceSelector__Container\",\n  componentId: \"sc-12bi6i-0\"\n})([\"@media screen and (min-width:\", \"){border-bottom:1px solid silver;}.MuiInput-underline:after{border-bottom:2px solid \", \";}.MuiInputBase-root{height:100%;}.MuiInput-underline:before{border-bottom:unset;}\"], UI.mediumLayoutBreak, colors.primary);","map":{"version":3,"sources":["/usr/src/app/src/components/elements/form/ProvinceSelector.tsx"],"names":["MenuItem","Select","useRouter","useDispatch","useSelector","styled","colors","UI","setSearchKey","ProvinceSelector","provinces","dispatch","router","searchKeyword","query","state","uiReducer","searchProvince","onChangeProvince","e","selectedProvince","target","value","push","pathname","page","onRenderProvinces","map","province","stateName","stateCode","Container","div","mediumLayoutBreak","primary"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,mBAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,MAAT,QAAuB,uCAAvB;AACA,SAASC,EAAT,QAAmB,mCAAnB;AACA,SAASC,YAAT,QAA6B,kCAA7B;AAOA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAA2B;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AACzD,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEA,MAAMS,MAAM,GAAGV,SAAS,EAAxB;AAHyD,MAKjDW,aALiD,GAK/BD,MAAM,CAACE,KALwB,CAKjDD,aALiD;;AAAA,qBAO9BT,WAAW,CAAW,UAAAW,KAAK;AAAA,WAAIA,KAAK,CAACC,SAAV;AAAA,GAAhB,CAPmB;AAAA,MAOjDC,cAPiD,gBAOjDA,cAPiD;;AASzD,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,gBADiB,GACED,CAAC,CAACE,MAAF,CAASC,KADX,EAGvB;;AAHuB;AAAA,6CAIjBX,QAAQ,CAACH,YAAY,CAAC,gBAAD,EAAmBY,gBAAnB,CAAb,CAJS;;AAAA;AAAA,gBAMlBP,aANkB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAUvBD,YAAAA,MAAM,CAACW,IAAP,CAAY;AACVC,cAAAA,QAAQ,EAAE,QADA;AAEVV,cAAAA,KAAK,EAAE;AACLG,gBAAAA,cAAc,EAAEE,CAAC,CAACE,MAAF,CAASC,KADpB;AAELT,gBAAAA,aAAa,EAAbA,aAFK;AAGLY,gBAAAA,IAAI,EAAE,CAHD,CAGG;;AAHH;AAFG,aAAZ;;AAVuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAoBA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,WAAOhB,SAAS,CAACiB,GAAV,CAAc,UAACC,QAAD;AAAA,aACnB,MAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,QAAQ,CAACC,SAAxB;AAAmC,QAAA,KAAK,EAAED,QAAQ,CAACE,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,QAAQ,CAACE,SADZ,CADmB;AAAA,KAAd,CAAP;AAKD,GAND;;AAQA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAEb,cAAf;AAA+B,IAAA,QAAQ,EAAEC,gBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,iBAAiB,EADpB,CADF,CADF;AAOD,CA5CM;AA8CP,IAAMK,SAAS,GAAG1B,MAAM,CAAC2B,GAAV;AAAA;AAAA;AAAA,oNAEmBzB,EAAE,CAAC0B,iBAFtB,EAOgB3B,MAAM,CAAC4B,OAPvB,CAAf","sourcesContent":["import { MenuItem, Select } from '@material-ui/core';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { colors } from '../../../constants/UI/Colors.constant';\nimport { UI } from '../../../constants/UI/UI.constant';\nimport { setSearchKey } from '../../../store/actions/ui.action';\nimport { IProvince } from '../../../types/Form.types';\n\ninterface IProps {\n  provinces: IProvince[];\n}\n\nexport const ProvinceSelector = ({ provinces }: IProps) => {\n  const dispatch = useDispatch();\n\n  const router = useRouter();\n\n  const { searchKeyword } = router.query;\n\n  const { searchProvince } = useSelector<any, any>(state => state.uiReducer);\n\n  const onChangeProvince = async e => {\n    const selectedProvince = e.target.value;\n\n    //  update our redux (we'll need this info for our post requests)\n    await dispatch(setSearchKey(\"searchProvince\", selectedProvince));\n\n    if (!searchKeyword) {\n      return;\n    }\n\n    router.push({\n      pathname: \"/posts\",\n      query: {\n        searchProvince: e.target.value,\n        searchKeyword,\n        page: 1 // since its a new search, page will be always 1!\n      }\n    });\n  };\n\n  const onRenderProvinces = () => {\n    return provinces.map((province: IProvince) => (\n      <MenuItem key={province.stateName} value={province.stateCode}>\n        {province.stateCode}\n      </MenuItem>\n    ));\n  };\n\n  return (\n    <Container>\n      <Select value={searchProvince} onChange={onChangeProvince}>\n        {onRenderProvinces()}\n      </Select>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  /*DESKTOP ONLY CODE*/\n  @media screen and (min-width: ${UI.mediumLayoutBreak}) {\n    border-bottom: 1px solid silver;\n  }\n\n  .MuiInput-underline:after {\n    border-bottom: 2px solid ${colors.primary};\n  }\n\n  .MuiInputBase-root {\n    height: 100%;\n  }\n\n  .MuiInput-underline:before {\n    border-bottom: unset;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}