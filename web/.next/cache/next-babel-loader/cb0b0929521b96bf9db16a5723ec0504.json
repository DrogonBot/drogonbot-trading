{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { appEnv } from '../constants/Env.constant';\nimport { globalStrings } from '../languages/global.lang';\nexport class TS {}\n\n_defineProperty(TS, \"replaceTemplateStrings\", (str, customVars) => {\n  const customVarsKeys = Object.keys(customVars);\n\n  if (customVarsKeys) {\n    for (const k of customVarsKeys) {\n      str = str.replace(new RegExp(`{{${k}}}`, \"g\"), customVars[k]);\n    }\n  }\n\n  return str;\n});\n\n_defineProperty(TS, \"string\", (model = null, key, customVars = {}) => {\n  if (!model) {\n    // pass only the global strings\n    return TS.replaceTemplateStrings(globalStrings[key][appEnv.language], customVars);\n  } // load language strings for a specific model\n\n\n  const {\n    strings\n  } = require(`../languages/${model}.lang.ts`); // add our global generic strings\n\n\n  const languageStrings = _objectSpread({}, strings, {}, globalStrings);\n\n  let string = languageStrings[key][appEnv.language];\n  const customVarsKeys = Object.keys(customVars);\n\n  if (customVarsKeys) {\n    for (const k of customVarsKeys) {\n      string = string.replace(new RegExp(`{{${k}}}`, \"g\"), customVars[k]);\n    }\n  }\n\n  return string;\n});","map":null,"metadata":{},"sourceType":"module"}