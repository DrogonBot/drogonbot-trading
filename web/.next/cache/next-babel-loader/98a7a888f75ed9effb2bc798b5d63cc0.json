{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SET_LOADING, SET_PAGINATION_LOADING_KEY_VALUES, SET_SEARCH_KEY_VALUE } from '../reducers/ui.reducer';\nexport var setSearchKey = function setSearchKey(key, value) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: SET_SEARCH_KEY_VALUE,\n              payload: {\n                key: key,\n                value: value\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var setLoading = function setLoading(status) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"default\";\n  return function (dispatch) {\n    // status regulates if we're in a loading state or not (useful for triggering the loading)\n    // key is used to set a loading bar to only certain elements (like BlockButton for example), if needed.\n    dispatch({\n      type: SET_LOADING,\n      payload: {\n        status: status,\n        key: key\n      }\n    });\n  };\n};\nexport var setPaginationKeyValues = function setPaginationKeyValues(payload) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: SET_PAGINATION_LOADING_KEY_VALUES,\n              payload: payload\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/jonit/Personal_projects/emprego-urgente/empregourgente-backend/web/src/store/actions/ui.action.ts"],"names":["SET_LOADING","SET_PAGINATION_LOADING_KEY_VALUES","SET_SEARCH_KEY_VALUE","setSearchKey","key","value","dispatch","type","payload","setLoading","status","setPaginationKeyValues"],"mappings":";AACA,SAASA,WAAT,EAAsBC,iCAAtB,EAAyDC,oBAAzD,QAAqF,wBAArF;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAcC,KAAd;AAAA,SAAgC,iBAC1DC,QAD0D;AAAA;AAAA;AAAA;AAAA;AAG1DA,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEL,oBADC;AAEPM,cAAAA,OAAO,EAAE;AACPJ,gBAAAA,GAAG,EAAHA,GADO;AAEPC,gBAAAA,KAAK,EAALA;AAFO;AAFF,aAAD,CAAR;;AAH0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;AAAA,CAArB;AAYP,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD;AAAA,MAAkBN,GAAlB,uEAAgC,SAAhC;AAAA,SAA8C,UACtEE,QADsE,EAEnE;AACH;AACA;AAEAA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,WADC;AAEPQ,MAAAA,OAAO,EAAE;AACPE,QAAAA,MAAM,EAANA,MADO;AAEPN,QAAAA,GAAG,EAAHA;AAFO;AAFF,KAAD,CAAR;AAOD,GAbyB;AAAA,CAAnB;AAeP,OAAO,IAAMO,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACH,OAAD;AAAA,SAA8B,kBAClEF,QADkE;AAAA;AAAA;AAAA;AAAA;AAGlEA,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEN,iCADC;AAEPO,cAAAA,OAAO,EAAPA;AAFO,aAAD,CAAR;;AAHkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;AAAA,CAA/B","sourcesContent":["import { IPaginationData } from '../../types/UI.types';\nimport { SET_LOADING, SET_PAGINATION_LOADING_KEY_VALUES, SET_SEARCH_KEY_VALUE } from '../reducers/ui.reducer';\n\nexport const setSearchKey = (key: string, value: string) => async (\n  dispatch\n) => {\n  dispatch({\n    type: SET_SEARCH_KEY_VALUE,\n    payload: {\n      key,\n      value,\n    },\n  });\n};\n\nexport const setLoading = (status: boolean, key: string = \"default\") => (\n  dispatch\n) => {\n  // status regulates if we're in a loading state or not (useful for triggering the loading)\n  // key is used to set a loading bar to only certain elements (like BlockButton for example), if needed.\n\n  dispatch({\n    type: SET_LOADING,\n    payload: {\n      status,\n      key,\n    },\n  });\n};\n\nexport const setPaginationKeyValues = (payload: IPaginationData) => async (\n  dispatch\n) => {\n  dispatch({\n    type: SET_PAGINATION_LOADING_KEY_VALUES,\n    payload,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}